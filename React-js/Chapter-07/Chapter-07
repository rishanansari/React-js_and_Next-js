Adding Interactivity with State

State with event handlers

Like button added.
To make the button do something when clicked, you can use the onClick event

function HomePage() {
const names = ['Ada Lovelace', 'Grace Hopper', 'Margaret Hamilton'];
const [likes, setLikes] = React.useState(0);
function handleClick() {
    console.log("increment like count")
    setLikes(likes + 1);
  }

return (
<div>
    <Header title="Develop. Preview. Ship." />
    <ul>
        {names.map((name) => (
        <li key={name}>{name}</li>
        ))}
    </ul>
    <button onClick={handleClick}>Like ({likes})</button>
</div>
);
}

Handling events:
You can define a function to "handle" events whenever they are triggered. Create a function before the return statement
called handleClick():

function handleClick() {
    console.log("increment like count")
  }
calling the handleClick.

**STATE THE HOOKS**
React has a set of functions called hooks. Hooks allow you to add additional logic such as state to your components. You can think of state as any information in your UI that changes over time, usually triggered by user interaction.

In fact, the React hook used to manage state is called: useState()
